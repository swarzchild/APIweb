import os
from extract_landmark import extract_landmark_sequence
from predict_gesture_knn import predict_gesture_knn


def process_video(video_path: str) -> dict:
    """
    ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠:
      1. Extract landmark ‡πÄ‡∏õ‡πá‡∏ô .csv
      2. ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ gesture
    :param video_path: path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
    :return: dict {gesture, confidence ‡∏´‡∏£‡∏∑‡∏≠ error}
    """
    try:
        print(f"üìπ Processing video: {video_path}")

        # 1) Extract landmark ‚Üí CSV
        csv_path = extract_landmark_sequence(
            video_path,
            label="predict_tmp",
            out_dir="backend/uploads"
        )

        if csv_path is None:
            return {"error": "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á landmark ‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ"}

        print(f"‚úÖ Landmark extracted to {csv_path}")

        # 2) Predict gesture ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏î‡∏• KNN
        gesture, prob = predict_gesture_knn(csv_path)

        result = {"gesture": gesture}
        if prob is not None:
            result["confidence"] = float(max(prob))  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

        print(f"üéØ Prediction: {result}")
        return result

    except FileNotFoundError as e:
        return {"error": str(e)}
    except ValueError as e:
        return {"error": str(e)}
    except Exception as e:
        return {"error": f"Unexpected error: {str(e)}"}
